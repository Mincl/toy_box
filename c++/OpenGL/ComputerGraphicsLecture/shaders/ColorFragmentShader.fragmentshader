#version 330 core

smooth in vec3 fragmentColor;
in vec3 fragNormal;
in vec3 fragVert;

// Output data
out vec3 color;

uniform mat4 model;
uniform vec3 cameraPosition;

uniform struct Light {
    vec3 position;
    vec3 intensities;
    float ambientCoefficient;
    float attenuationFactor;
} light;

void main() {
    // color = fragmentColor;

    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 normal = normalize(normalMatrix * fragNormal);

    vec3 fragPosition = vec3(model * vec4(fragVert, 1));

    vec3 surfaceToLight = light.position - fragPosition;

    //float brightness = dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal));
    //brightness = clamp(brightness, 0, 1);
    float diffuseCoefficient = max(0.0, dot(normal, surfaceToLight) / (length(surfaceToLight) * length(normal)));
    vec3 ambient = light.ambientCoefficient * fragmentColor.rgb * light.intensities;
    vec3 diffuse = diffuseCoefficient * fragmentColor.rgb * light.intensities;

    vec3 incidenceVector = -surfaceToLight;
    vec3 reflectionVector = reflect(incidenceVector, normal);
    vec3 surfaceToCamera = normalize(cameraPosition - fragPosition);
    float cosAngle = max(0.0, dot(surfaceToCamera, reflectionVector));
    float materialShininess = 0.2;
    float specularCoefficient = 0.0;
    if(diffuseCoefficient > 0.0) {
        specularCoefficient = pow(cosAngle, materialShininess);
    }
    vec3 specular = specularCoefficient * fragmentColor * light.intensities;

    float powOfDistanceToLight = pow(surfaceToLight.x, 2) + pow(surfaceToLight.y, 2) + pow(surfaceToLight.z, 2);
    float attenuation = 1.0 / (1.0 + light.attenuationFactor * powOfDistanceToLight);
    
    vec3 linearColor = ambient + attenuation*(diffuse, specular);

    vec3 gamma = vec3(1.0/2.2);
    color = pow(linearColor, gamma);
    
    //color = ambient + diffuse;
}
